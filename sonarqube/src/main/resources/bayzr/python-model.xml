<rules>
  <rule>
     <key>C1001</key>
     <name><![CDATA[Old-style class defined]]></name>
     <description><![CDATA[Used when a class is defined using the old style. This message belongs to the newstyle checker. In Python 2.x, old-style classes are defined by not inheriting from a base class or by inheriting from other old-style classes. New-style classes are defined by inheriting from class object or from other new-style classes. Python 3.x supports only new-style classes; if no base class is specified on a class definition, the class implicitly inherits from object. It is recommended to define only new-style classes, because they are properly integrated into Python's type system. See Python docs article: New-Style Classes for details.]]></description>
     <internalKey>C1001</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0712</key>
     <name><![CDATA[W0712]]></name>
     <description><![CDATA[W0712]]></description>
     <internalKey>W0712</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0304</key>
     <name><![CDATA[Final newline missing]]></name>
     <description><![CDATA[Used when a Python source file has no line end character(s) on its last line. This message belongs to the format checker. While Python interpreters typically do not require line end character(s) on the last line, other programs processing Python source files may do, and it is simply good practice to have it. This is confirmed in Python docs: Line Structure which states that a physical line is ended by the respective line end character(s) of the platform.]]></description>
     <internalKey>C0304</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0102</key>
     <name><![CDATA[Black listed name "%s"]]></name>
     <description><![CDATA[Used when the name is listed in the "bad-names" black list. This message belongs to the basic checker. PyLint can be customized to help enforce coding guidelines that discourage or forbid use of certain names for variables, functions, etc.. These names are specified with the bad-names option. This message is raised whenever a name is in the list of names defined with the bad-names option.]]></description>
     <internalKey>C0102</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0103</key>
     <name><![CDATA[Invalid %s name "%s"Invalid constant name "newline"Invalid variable name "MyVar"Invalid class name "myClass"...]]></name>
     <description><![CDATA[Used when a name doesn't doesn't fit the naming convention associated to its type (constant, variable, classâ€¦). This message belongs to the basic checker. PyLint raises this message when an object has a name that doesn't fit the naming convention associated to its object type. The naming convention is defined with a regular expression, and the naming convention is satisfied if the name matches the regular expression. The regular expression syntax is the normal Python regular expression syntax, as used in Python raw strings (e.g. r"abc"). Options can be used to override the default regular expression associated to each type. The table below lists the types, their associated options, and their default regular expressions. In addition, the following options are related to naming conventions: Options that are not really related to naming conventions, but to names:]]></description>
     <internalKey>C0103</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0303</key>
     <name><![CDATA[Trailing whitespace]]></name>
     <description><![CDATA[Used when a line has one or more whitespace characters directly before the line end character(s). This message belongs to the format checker. The PEP 8: Programming Recommendations mentions trailing whitespaces on a line only in context of split strings: Don't write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them. PyLint recommends not to have trailing whitespace on any line.]]></description>
     <internalKey>C0303</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0301</key>
     <name><![CDATA[Line too long (%s/%s)]]></name>
     <description><![CDATA[Used when a line is longer than the limit specified in the max-line-length option. It is a good idea to keep each line within a maximum length to keep it from wrapping past the edge of an editing window. This improves readability and tempers other developers' irritability! It is also recommended in PEP 8. The default value of the max-line-length option is 80, the customary width of a terminal window. PEP 8 recommends 79. Note that the line length and the limit are counted in characters, not in Bytes needed to represent these characters. Todo: Clarify whether or not the line end character(s) are included in the count.]]></description>
     <internalKey>C0301</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0322</key>
     <name><![CDATA[Old: Operator not preceded by a space]]></name>
     <description><![CDATA[Note: This message was replaced with C0326 in PyLint 1.1.0. Used when one of the following operators (!= | <= | == | >= | < | > | = | += |-= | *= | /= | %) is not preceded by a space. This message belongs to the format checker. Python does not require spaces around these operators, but it does improve readability and thus makes for easier debugging.]]></description>
     <internalKey>C0322</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0323</key>
     <name><![CDATA[Old: Operator not followed by a space]]></name>
     <description><![CDATA[Note: This message was replaced with C0326 in PyLint 1.1.0. Used when one of the following operators (!= | <= | == | >= | < | > | = | += |-= | *= | /= | %) is not followed by a space. This message belongs to the format checker. Python does not require spaces around these operators, but it does improve readability and thus makes for easier debugging.]]></description>
     <internalKey>C0323</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0324</key>
     <name><![CDATA[Old: Comma not followed by a space]]></name>
     <description><![CDATA[Note: This message was replaced with C0326 in PyLint 1.1.0. Used when a comma (,) is not followed by a space. This message belongs to the format checker. Python syntax does not require that commas are followed by space, but it improves readability.]]></description>
     <internalKey>C0324</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0107</key>
     <name><![CDATA[Unnecessary pass statement]]></name>
     <description><![CDATA[Used when a "pass" statement that can be avoided is encountered. Explanation needed]]></description>
     <internalKey>W0107</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0211</key>
     <name><![CDATA[Static method with %r as first argument]]></name>
     <description><![CDATA[Used when a static method has self or cls as first argument. Explanation needed from a more experienced Python programmer. :-) But this is one rookie's understanding of it. Because it is customary for instance or class methods to take self or cls, respectively, as their first arguments, a method that uses either of these names but is found to be a static method may have been defined incorrectly. Even if the method being flagged is truly meant to be a static method, you should be mindful of the convention above and choose names other than self or cls for arguments. Otherwise you risk confusing other Python programmers looking at your code.]]></description>
     <internalKey>W0211</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0301</key>
     <name><![CDATA[Unnecessary semicolon]]></name>
     <description><![CDATA[Used when a statement is endend by a semi-colon (";"), which isn't necessary (that's python, not C ;). Semicolons are not necessary in Python unless you are putting more than one statement in a line (which is a poor idea anyway). This is a style slip-up that's particularly easy to make for old hands of other programming languages such as C or Perl, where semicolons are always (or almost always) required after each statement.]]></description>
     <internalKey>W0301</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0311</key>
     <name><![CDATA[Bad indentation. Found %s %s, expected %s]]></name>
     <description><![CDATA[Used when an unexpected number of indentation's tabulations or spaces has been found. Explanation needed]]></description>
     <internalKey>W0311</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0312</key>
     <name><![CDATA[Found indentation with %ss instead of %ssFound indentation with tabs instead of spacesFound indentation with spaces instead of tabs]]></name>
     <description><![CDATA[Used when there are some mixed tabs and spaces in a module. Python interprets tabs and spaces differently, so consistent indentation is critical to the correct interpretation of blocks in Python syntax. This warning is raised when a mix of both spaces and tabs is used in indentationâ€”or more precisely, when an indent is detected that is not consistent with the indent-string option. By default, indent-string is set to four spaces, the style of indentation recommended in PEP 8.]]></description>
     <internalKey>W0312</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0331</key>
     <name><![CDATA[W0331]]></name>
     <description><![CDATA[W0331]]></description>
     <internalKey>W0331</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0332</key>
     <name><![CDATA[W0332]]></name>
     <description><![CDATA[W0332]]></description>
     <internalKey>W0332</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0333</key>
     <name><![CDATA[W0333]]></name>
     <description><![CDATA[W0333]]></description>
     <internalKey>W0333</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0404</key>
     <name><![CDATA[W0404]]></name>
     <description><![CDATA[W0404]]></description>
     <internalKey>W0404</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0611</key>
     <name><![CDATA[W0611]]></name>
     <description><![CDATA[W0611]]></description>
     <internalKey>W0611</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0325</key>
     <name><![CDATA[Unnecessary parens after %r keyword]]></name>
     <description><![CDATA[Used when the expression after one of the following keywords is surrounded by parenthesis: assert, del, elif, except, for, if, in, not, raise, return, while, yield. In addition, for Python 2.x: print. This message belongs to the format checker. Parenthesis around such expressions are not necessary in Python and should not be used, for simplicity. Python is not C or Java.]]></description>
     <internalKey>C0325</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0326</key>
     <name><![CDATA[Exactly one space required before assignment]]></name>
     <description><![CDATA[Used when a wrong number of spaces is used around an operator, bracket, or comma, or before a block opener colon. This message belongs to the format checker. In PyLint 1.1.0, this message replaced the older whitespace-related messages C0322, C0323, and C0324, and now reports some additional situations. This message is raised when any of the following rules is violated: Following these rules improves consistency across different developers and in addition leads to better readability, and thus makes for easier debugging. See also PEP 8: Whitespace in Expressions and Statements]]></description>
     <internalKey>C0326</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0110</key>
     <name><![CDATA[W0110]]></name>
     <description><![CDATA[W0110]]></description>
     <internalKey>W0110</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0121</key>
     <name><![CDATA[W0121]]></name>
     <description><![CDATA[W0121]]></description>
     <internalKey>W0121</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0111</key>
     <name><![CDATA[Missing %s docstringMissing module docstringMissing class docstring...]]></name>
     <description><![CDATA[Used when a module, function, class or method has no docstring. Some special methods like __init__() don't require a docstring and for those, this message is not raised if they have no docstring. This message belongs to the basic checker. Documentation Strings (called "docstrings") help you understand the intention of a module, function, class or method. The chances that you will remember what each part of your code does is slim. Using docstrings will save you time and troubleshooting. Even the most descriptive function name (i.e. create_effective_rate_history()) will need a guide to its parameters. Docstrings are helpful when using autodoc options in programs like Sphinx, so you, as the programmer, only have to describe a thing once. The definitive guide to docstrings is PEP 257. There is a good guide to documenting Python signatures at the Sphinx Domains page.]]></description>
     <internalKey>C0111</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0112</key>
     <name><![CDATA[Empty %s docstringEmpty module docstringEmpty function docstring...]]></name>
     <description><![CDATA[Used when a module, function, class or method has an empty docstring (it would be too easy ;). This message belongs to the basic checker. See C0111 for an explanation of docstrings.]]></description>
     <internalKey>C0112</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0202</key>
     <name><![CDATA[Class method %s should have cls as first argument]]></name>
     <description><![CDATA[Used when the first argument of a class method has a name other than cls. This message belongs to the classes checker. This message reports violations of the corresponding Python convention. The cls name is used to easily differentiate class methods from instance methods. PEP 8: Function and Method Arguments states this convention: Always use self for the first argument to instance methods. Always use cls for the first argument to class methods. For the corresponding message on instance methods, see E0213.]]></description>
     <internalKey>C0202</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0203</key>
     <name><![CDATA[Metaclass method %s should have mcs as first argument]]></name>
     <description><![CDATA[Used when the first argument of a metaclass method has a name other than mcs. This message belongs to the classes checker. Explanation needed]]></description>
     <internalKey>C0203</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0302</key>
     <name><![CDATA[Too many lines in module (%s)]]></name>
     <description><![CDATA[Used when a module has more lines than the limit specified in the max-module-lines option. This message belongs to the format checker. This simply flags modules that exceed a certain number of lines. Besides reducing readability, the excessive length may be a sign that refactoring is needed. The default value of the max-module-lines option is 1000.]]></description>
     <internalKey>C0302</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0903</key>
     <name><![CDATA[The error basically says that classes aren't meant to just store data, as you're basically treating the class as a dictionary.]]]></name>
     <description><![CDATA[The error basically says that classes aren't meant to just store data, as you're basically treating the class as a dictionary]]></description>
     <internalKey>R0903</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>60min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0911</key>
     <name><![CDATA[R0911]]></name>
     <description><![CDATA[R0911]]></description>
     <internalKey>R0911</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0914</key>
     <name><![CDATA[Too many local variables (%s/%s)]]></name>
     <description><![CDATA[Used when a method or function uses more than 15 variables in the namespace. Some programmers consider using several local variables in on function or method is an indicator that the function or method is too complex, or trying to do too much. Consider a function that does several things: Each of these comments indicates a place where a separate function could be used: One thing worth to mention is that function/method arguments are also local variables. If you get this message for function with say 5 arguments, but count only 12 local variables, then you have forgotten to count the arguments too.]]></description>
     <internalKey>R0914</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0108</key>
     <name><![CDATA[Lambda may not be necessary]]></name>
     <description><![CDATA[Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda. It is trying to tell you that there is no point in using a lambda at all. Instead of writing your code like this: results = " ".join(rdd.map(lambda x: save_and_show(x)).collect()) You should write it like this: results = " ".join(rdd.map(save_and_show.collect()) It just assumes that all the values that are in the rdd will be the same as all the values in the function.]]></description>
     <internalKey>W0108</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0408</key>
     <name><![CDATA[W0408]]></name>
     <description><![CDATA[W0408]]></description>
     <internalKey>W0408</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0406</key>
     <name><![CDATA[W0406]]></name>
     <description><![CDATA[W0406]]></description>
     <internalKey>W0406</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0604</key>
     <name><![CDATA[W0604]]></name>
     <description><![CDATA[W0604]]></description>
     <internalKey>W0604</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0612</key>
     <name><![CDATA[W0612]]></name>
     <description><![CDATA[W0612]]></description>
     <internalKey>W0612</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0613</key>
     <name><![CDATA[Unused argument %r]]></name>
     <name><![CDATA[def myfunc(a1, a2):    del a2 # unused    return a1*2]]></name>
     <name><![CDATA[def myfunc(a1, unused_a2):    return a1*2def func2():    return myfunc(42, a2=16) # now fails!]]></name>
     <description><![CDATA[Used when an argument is not used in the body of its function or method. Apart from the obvious solution of using the argument, this message can be avoided by deleting the argument: Other solutions such as renaming the argument to 'unused_a2' or the like are not recommended, because a caller could pass the argument by name: Explanation needed]]></description>
     <internalKey>W0613</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0204</key>
     <name><![CDATA[Metaclass class method %s should have %s as first argument]]></name>
     <description><![CDATA[Used when a metaclass class method has a first argument named differently than the value specified in the valid-metaclass-classmethod-first-arg option (defaults to mcs). Specifying the value mcs is recommended to easily differentiate such methods from regular instance methods. This message belongs to the classes checker. Explanation needed]]></description>
     <internalKey>C0204</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0921</key>
     <name><![CDATA[R0921]]></name>
     <description><![CDATA[R0921]]></description>
     <internalKey>R0921</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0923</key>
     <name><![CDATA[Interface not implemented]]></name>
     <description><![CDATA[Used when an interface class has not been implemented. PyLint infers that a class is an interface class from two circumstances: If the class name ends with Interface (? Is that really the rule ?), it is considered an interface class, and/or if the class inherits from an interface class, it is considered an interface class. Note that the rule described in PyLint FAQ 5.1 only describes the second part and misses to describe the first part. PyLint uses the Zope 2 convention for recognizing whether an interface class has been implemented: The class implementing an interface class specifies the implemented interface class in its class attribute __implements__ (see PyLint FAQ 5.2). PyLint raises this message for interface classes that are defined in a module and have not been implemented in that module. (? Is that really the rule ?) Note, there are currently two issues with this message:]]></description>
     <internalKey>R0923</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0141</key>
     <name><![CDATA[Used builtin function %r]]></name>
     <description><![CDATA[Used when a blacklisted built-in function is used (see the bad-function option). Usual blacklisted functions are the ones like map or filter, where Python now offers some cleaner alternative like list comprehension. Explanation needed]]></description>
     <internalKey>W0141</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0142</key>
     <name><![CDATA[Used * or ** magic]]></name>
     <description><![CDATA[Used when a function or method is called using *args or **kwargs to dispatch arguments. This doesn't improve readability and should be used with care. Explanation needed (but also see Ned Batchelder's blog post of 14 June 2008 about PyLint, which contains a pointed comment on this warning!).]]></description>
     <internalKey>W0142</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0403</key>
     <name><![CDATA[W0403]]></name>
     <description><![CDATA[W0403]]></description>
     <internalKey>W0403</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0922</key>
     <name><![CDATA[R0922]]></name>
     <description><![CDATA[R0922]]></description>
     <internalKey>R0922</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>45min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0123</key>
     <name><![CDATA[W0123]]></name>
     <description><![CDATA[W0123]]></description>
     <internalKey>W0123</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0122</key>
     <name><![CDATA[Use of exec]]></name>
     <description><![CDATA[Used when you use the exec statement, to discourage its usage. That doesn't mean you cannot use it! Explanation needed]]></description>
     <internalKey>W0122</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1201</key>
     <name><![CDATA[W1201]]></name>
     <description><![CDATA[W1201]]></description>
     <internalKey>W1201</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0901</key>
     <name><![CDATA[R0901]]></name>
     <description><![CDATA[R0901]]></description>
     <internalKey>R0901</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>180min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0212</key>
     <name><![CDATA[Access to a protected member %s of a client class]]></name>
     <description><![CDATA[Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined. Explanation needed]]></description>
     <internalKey>W0212</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>60min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0233</key>
     <name><![CDATA[__init__ method from a non direct base class %r is called]]></name>
     <description><![CDATA[Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class. Explanation needed]]></description>
     <internalKey>W0233</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>120min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0603</key>
     <name><![CDATA[W0603]]></name>
     <description><![CDATA[W0603]]></description>
     <internalKey>W0603</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>60min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0402</key>
     <name><![CDATA[W0402]]></name>
     <description><![CDATA[W0402]]></description>
     <internalKey>W0402</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0109</key>
     <name><![CDATA[W0109]]></name>
     <description><![CDATA[W0109]]></description>
     <internalKey>W0109</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1402</key>
     <name><![CDATA[W1402]]></name>
     <description><![CDATA[W1402]]></description>
     <internalKey>W1402</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1301</key>
     <name><![CDATA[W1301]]></name>
     <description><![CDATA[W1301]]></description>
     <internalKey>W1301</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0701</key>
     <name><![CDATA[Bad except clauses order (%s)]]></name>
     <description><![CDATA[Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler. Explanation needed]]></description>
     <internalKey>E0701</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0702</key>
     <name><![CDATA[Raising %s while only classes, instances or string are allowed]]></name>
     <description><![CDATA[Used when something which is neither a class, an instance or a string is raised (i.e. a TypeError will be raised). Explanation needed]]></description>
     <internalKey>E0702</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0710</key>
     <name><![CDATA[Raising a new style class which doesn't inherit from BaseException]]></name>
     <description><![CDATA[Used when a new style class which doesn't inherit from BaseException raised since it's not possible with python < 2.5. Explanation needed]]></description>
     <internalKey>E0710</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0711</key>
     <name><![CDATA[E0711]]></name>
     <description><![CDATA[E0711]]></description>
     <internalKey>E0711</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0150</key>
     <name><![CDATA[W0150]]></name>
     <description><![CDATA[W0150]]></description>
     <internalKey>W0150</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0701</key>
     <name><![CDATA[W0701]]></name>
     <description><![CDATA[W0701]]></description>
     <internalKey>W0701</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0702</key>
     <name><![CDATA[No exception type(s) specified]]></name>
     <description><![CDATA[Used when an except clause doesnâ€™t specify exceptions type to catch.++ Explanation:Catching exceptions should be as precise as possible. The type of exceptions that can be raised should be known in advance. Using a catch-all Exception instance defeats the purpose of knowing the type of error that occured, and prohibits the use of tailored responses. Used when an except clause doesnâ€™t specify exceptions type to catch.]]></description>
     <internalKey>W0702</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0703</key>
     <name><![CDATA[Catching too general exception %s]]></name>
     <description><![CDATA[Used when an except catches Exception instances. Catching exceptions should be as precise as possible. The type of exceptions that can be raised should be known in advance. Using a catch-all Exception instance defeats the purpose of knowing the type of error that occured, and prohibits the use of tailored responses.]]></description>
     <internalKey>W0703</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0704</key>
     <name><![CDATA[W0704]]></name>
     <description><![CDATA[W0704]]></description>
     <internalKey>W0704</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0710</key>
     <name><![CDATA[W0710]]></name>
     <description><![CDATA[W0710]]></description>
     <internalKey>W0710</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0712</key>
     <name><![CDATA[E0712]]></name>
     <description><![CDATA[E0712]]></description>
     <internalKey>E0712</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0623</key>
     <name><![CDATA[W0623]]></name>
     <description><![CDATA[W0623]]></description>
     <internalKey>W0623</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0001</key>
     <name><![CDATA[(syntax error raised for a module; message varies)]]></name>
     <description><![CDATA[Used when a module has a Python syntax error. This message is raised by Python and does not belong to any PyLint checker. The message text describes the syntax error.]]></description>
     <internalKey>E0001</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0100</key>
     <name><![CDATA[__init__ method is a generator]]></name>
     <description><![CDATA[Used when the special class method __init__() is turned into a generator by a yield statement in its body. This message belongs to the basic checker. The __init__() method is required to return nothing. Python 2.7 and 3.x raises: TypeError: __init__() should return None when __init__() is called and executes a yield statement. PyLint reports this error without depending on the actual invocation.]]></description>
     <internalKey>E0100</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0101</key>
     <name><![CDATA[Explicit return in __init__]]></name>
     <description><![CDATA[Used when the special class method __init__() has an explicit return value. This message belongs to the basic checker. The __init__() method is required to return nothing. Python 2.7 and 3.x raises: TypeError: __init__() should return None when __init__() is called and executes a return statement with a value other than None. PyLint reports this error without depending on the actual invocation.]]></description>
     <internalKey>E0101</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0102</key>
     <name><![CDATA[%s already defined line %s]]></name>
     <description><![CDATA[Used when a function / class / method is redefined. This message belongs to the basic checker. In Python, a redefinition of functions, classes, and methods is allowed and overrides the original definition. This is confusing to readers and is therefore considered an error in PyLint.]]></description>
     <internalKey>E0102</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0103</key>
     <name><![CDATA[%r not properly in loop]]></name>
     <description><![CDATA[Used when the break or continue keywords are used outside of a loop. This message belongs to the basic checker. Python docs: The break Statement allows break only within loops (and not within function or class definitions within a loop). Similarly for the continue statement. Python 2.6(?) and above raises a SyntaxError for this situation when importing the module. PyLint reports this error using this message, without depending on the import actually happening.]]></description>
     <internalKey>E0103</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0104</key>
     <name><![CDATA[Return outside function]]></name>
     <description><![CDATA[Used when a return statement is found outside a function or method. This message belongs to the basic checker. Python 2.6(?) and above raises a SyntaxError for this situation when importing the module. PyLint reports this error using this message, without depending on the import actually happening.]]></description>
     <internalKey>E0104</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0105</key>
     <name><![CDATA[Yield outside function]]></name>
     <description><![CDATA[Used when a yield statement is found outside a function or method. This message belongs to the basic checker. Python 2.6(?) and above raises a SyntaxError for this situation when importing the module. PyLint reports this error using this message, without depending on the import actually happening.]]></description>
     <internalKey>E0105</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0106</key>
     <name><![CDATA[Return with argument inside generator]]></name>
     <description><![CDATA[Used when a return statement with an argument is found in a generator function or method (e.g. with some yield statements). This message belongs to the basic checker. Functions and methods that return values using yield (that is, generators) cannot in addition return values using return. Python 2.6(?) and above raises a SyntaxError for this situation when importing the module. PyLint reports this error using this message, without depending on the import actually happening.]]></description>
     <internalKey>E0106</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0107</key>
     <name><![CDATA[Use of the non-existent %s operator]]></name>
     <description><![CDATA[Used when you attempt to use operators that do not exist in Python. This message belongs to the basic checker. One example are the C-style pre- or post- increment or decrement operators â€” and ++, which don't exist in Python. In this case, use the += or -= operators instead.]]></description>
     <internalKey>E0107</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0202</key>
     <name><![CDATA[An attribute affected in %s line %s hide this method]]></name>
     <description><![CDATA[Used when a class defines a method which is hidden by an instance attribute with the same name. This message belongs to the classes checker. Examples are:]]></description>
     <internalKey>E0202</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0203</key>
     <name><![CDATA[Access to member %r before its definition line %s]]></name>
     <description><![CDATA[Used when an instance member is accessed before it's actually assigned. This message belongs to the classes checker. An example for such a situation is an instance attribute in __init__() that is read before it was initialized. This includes usage of the += operator on an uninitialized instance attribute. See also E0601 for uninitialized variables that are not instance attributes, or E1101 for entirely undefined members.]]></description>
     <internalKey>E0203</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0211</key>
     <name><![CDATA[Method has no argument]]></name>
     <description><![CDATA[Used when a method which should have the bound instance as first argument has no argument defined. This message belongs to the classes checker. The first argument of a method in Python must be the object on which the method is invoked. This object may be the instance of a class or a class. The name of that argument follows certain conventions. See PEP 8: Function and Method Arguments for details.]]></description>
     <internalKey>E0211</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0213</key>
     <name><![CDATA[Method should have "self" as first argument]]></name>
     <description><![CDATA[Used when the first argument of a (instance) method has a name other than self. This message belongs to the classes checker. This is considered an error since this convention is so common that you shouldn't break it! This message enforces the corresponding Python convention. Python docs: Classes / Random Remarks offers a motivation for this convention: Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention. PEP 8: Function and Method Arguments states the convention more crisply as a rule: Always use self for the first argument to instance methods. Always use cls for the first argument to class methods. For the corresponding message on class methods, see C0202.]]></description>
     <internalKey>E0213</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0221</key>
     <name><![CDATA[Interface resolved to %s is not a class]]></name>
     <description><![CDATA[Used when a class claims to implement an interface which is not a class. Explanation needed Todo: Python has no interfaces. Clarify whether this message is about abstract base classes, zope.interface classes or simply any base class.]]></description>
     <internalKey>E0221</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0501</key>
     <name><![CDATA[Old: Non ascii characters found but no encoding specified (PEP 263)]]></name>
     <name><![CDATA[# coding=utf-8]]></name>
     <name><![CDATA[# I wrote this Python program with this encoding: utf-8]]></name>
     <name><![CDATA[# -*- coding: utf-8 -*-]]></name>
     <name><![CDATA[# vim: set fileencoding=utf-8 :]]></name>
     <description><![CDATA[Note: This message was removed in PyLint 0.23. Python 2.5 and above handles this error by raising a SyntaxError exception (see E0001). Used when some non-ASCII characters are detected but no encoding is specified, as explicited in PEP 263. If a program contains characters that are beyond the range of ASCII, Python must know what encoding is being used so it can interpret the characters correctly. Python accepts this setting in a forgiving way. Simply make one of the first two lines a comment with the word "coding" followed by a colon or equals sign and the name of the encoding. For example, all of the following are correct ways to specify UTF-8 encoding: Note that these last two are constructed in such a way that they double as encoding directives for Emacs and VIM, respectively.]]></description>
     <internalKey>E0501</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0502</key>
     <name><![CDATA[Old: Wrong encoding specified (%s)]]></name>
     <description><![CDATA[Note: This message was removed in PyLint 0.23. Python 2.5 and above handles this error by raising a SyntaxError exception (see E0001). Used when a known encoding is specified but the file doesn't seem to be actually in this encoding. If PyLint is able to tell that the non-ASCII characters in a program look like a different encoding that what you specified at the top of the file, it will tell you so. Make sure you set this correctly if you want Python to interpret your program correctly! See also E0501.]]></description>
     <internalKey>E0502</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0503</key>
     <name><![CDATA[Old: Unknown encoding specified (%s)]]></name>
     <description><![CDATA[Note: This message was removed in PyLint 0.22. Python 2.5 (?) and above raises a SyntaxError to indicate this situation (see E0001). Used when an encoding is specified, but it's unknown to Python. See "Standard Encodings" in the documentation for the codecs module for a list of encodings Python understands and their names. See also E0501.]]></description>
     <internalKey>E0503</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0601</key>
     <name><![CDATA[Using variable %r before assignment]]></name>
     <description><![CDATA[Used when a local variable is accessed before its assignment. This includes usage of the += operator on an uninitialized local variable. See also E0203.]]></description>
     <internalKey>E0601</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0602</key>
     <name><![CDATA[Undefined variable %r]]></name>
     <description><![CDATA[Used when an undefined variable is accessed. See also E0601. Todo: Better describe the difference. Such variables can be added to the additional-builtins option so PyLint will consider them as defined. Todo: Verify whether the good-names option also works for this.]]></description>
     <internalKey>E0602</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0611</key>
     <name><![CDATA[No name %r in module %r]]></name>
     <description><![CDATA[Used when a name cannot be found in a module. Explanation needed]]></description>
     <internalKey>E0611</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1001</key>
     <name><![CDATA[Use of __slots__ on an old style class]]></name>
     <description><![CDATA[Used when an old style class use the __slots__ attribute. Explanation needed]]></description>
     <internalKey>E1001</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1002</key>
     <name><![CDATA[Use of super on an old style class]]></name>
     <name><![CDATA[class Farm:     def __init__(self): pass class Barn(Farm):     def __init__(self):         Farm.__init__(self)]]></name>
     <description><![CDATA[Used when an old style class use the super builtin. Explanation needed]]></description>
     <internalKey>E1002</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1003</key>
     <name><![CDATA[Bad first argument %r given to super()]]></name>
     <description><![CDATA[Used when an argument other than the current class is given as first argument of the super builtin. Explanation needed]]></description>
     <internalKey>E1003</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1101</key>
     <name><![CDATA[%s %r has no %r memberFunction %r has no %r memberVariable %r has no %r member. . .]]></name>
     <description><![CDATA[Used when an object (variable, function, â€¦) is accessed for a non-existent member. False positives: This message may report object members that are created dynamically, but exist at the time they are accessed. Explanation needed The name of this error is no-member, so can be disabled on a single line with # pylint: disable=no-member]]></description>
     <internalKey>E1101</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1102</key>
     <name><![CDATA[%s is not callable]]></name>
     <description><![CDATA[Used when an object being called has been inferred to a non-callable object Explanation needed]]></description>
     <internalKey>E1102</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1103</key>
     <name><![CDATA[%s %r has no %r member (but some types could not be inferred)]]></name>
     <description><![CDATA[Used when a variable is accessed for a nonexistent member, but astng was not able to interpret all possible types of this variable. Explanation needed]]></description>
     <internalKey>E1103</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1111</key>
     <name><![CDATA[Assigning to function call which doesn't return]]></name>
     <description><![CDATA[Used when an assigment is done on a function call but the inferred function doesn't return anything. Explanation needed]]></description>
     <internalKey>E1111</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1120</key>
     <name><![CDATA[E1120]]></name>
     <description><![CDATA[E1120]]></description>
     <internalKey>E1120</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1121</key>
     <name><![CDATA[E1121]]></name>
     <description><![CDATA[E1121]]></description>
     <internalKey>E1121</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1122</key>
     <name><![CDATA[E1122]]></name>
     <description><![CDATA[E1122]]></description>
     <internalKey>E1122</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1123</key>
     <name><![CDATA[E1123]]></name>
     <description><![CDATA[E1123]]></description>
     <internalKey>E1123</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1124</key>
     <name><![CDATA[E1124]]></name>
     <description><![CDATA[E1124]]></description>
     <internalKey>E1124</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E9900</key>
     <name><![CDATA[E9900]]></name>
     <description><![CDATA[E9900]]></description>
     <internalKey>E9900</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1301</key>
     <name><![CDATA[E1301]]></name>
     <description><![CDATA[E1301]]></description>
     <internalKey>E1301</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1302</key>
     <name><![CDATA[E1302]]></name>
     <description><![CDATA[E1302]]></description>
     <internalKey>E1302</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1303</key>
     <name><![CDATA[E1303]]></name>
     <description><![CDATA[E1303]]></description>
     <internalKey>E1303</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1304</key>
     <name><![CDATA[E1304]]></name>
     <description><![CDATA[E1304]]></description>
     <internalKey>E1304</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1305</key>
     <name><![CDATA[Used when a format string that uses unnamed conversion specifiers is given too many arguments.]]></name>
     <description><![CDATA[Used when a format string that uses unnamed conversion specifiers is given too many arguments.]]></description>
     <internalKey>E1305</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1306</key>
     <name><![CDATA[Used when a format string that uses unnamed conversion specifiers is given too few arguments]]></name>
     <description><![CDATA[Used when a format string that uses unnamed conversion specifiers is given too few arguments]]></description>
     <internalKey>E1306</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0221</key>
     <name><![CDATA[Arguments number differs from %s method]]></name>
     <description><![CDATA[Used when a method has a different number of arguments than in the implemented interface or in an overridden method. Explanation needed]]></description>
     <internalKey>W0221</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0222</key>
     <name><![CDATA[Signature differs from %s method]]></name>
     <description><![CDATA[Used when a method signature is different than in the implemented interface or in an overridden method. Explanation needed]]></description>
     <internalKey>W0222</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0410</key>
     <name><![CDATA[W0410]]></name>
     <description><![CDATA[W0410]]></description>
     <internalKey>W0410</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1001</key>
     <name><![CDATA[W1001]]></name>
     <description><![CDATA[W1001]]></description>
     <internalKey>W1001</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1200</key>
     <name><![CDATA[E1200]]></name>
     <description><![CDATA[E1200]]></description>
     <internalKey>E1200</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1201</key>
     <name><![CDATA[E1201]]></name>
     <description><![CDATA[E1201]]></description>
     <internalKey>E1201</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1205</key>
     <name><![CDATA[E1205]]></name>
     <description><![CDATA[E1205]]></description>
     <internalKey>E1205</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1206</key>
     <name><![CDATA[E1206]]></name>
     <description><![CDATA[E1206]]></description>
     <internalKey>E1206</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0330</key>
     <name><![CDATA[C0330]]></name>
     <description><![CDATA[C0330]]></description>
     <internalKey>C0330</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0108</key>
     <name><![CDATA[Duplicate argument name %s in function definition]]></name>
     <description><![CDATA[Used when an argument name is used more than once in a function or method definition. This message belongs to the basic checker. Python 2.6(?) and above raises a SyntaxError for this situation when importing the module. PyLint reports this error using this message, without depending on the import actually happening.]]></description>
     <internalKey>E0108</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0109</key>
     <name><![CDATA[E0109]]></name>
     <description><![CDATA[E0109]]></description>
     <internalKey>E0109</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0111</key>
     <name><![CDATA[E0111]]></name>
     <description><![CDATA[E0111]]></description>
     <internalKey>E0111</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0235</key>
     <name><![CDATA[__exit__ must accept 3 arguments: type, value, traceback]]></name>
     <description><![CDATA[Used when the __exit__ method of a context manager class does not have exactly three arguments. The names of the arguments are ignored for purposes of this message. For details, see Python docs: The with statement.]]></description>
     <internalKey>E0235</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0236</key>
     <name><![CDATA[E0236]]></name>
     <description><![CDATA[E0236]]></description>
     <internalKey>E0236</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0238</key>
     <name><![CDATA[E0238]]></name>
     <description><![CDATA[E0238]]></description>
     <internalKey>E0238</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1004</key>
     <name><![CDATA[E1004]]></name>
     <description><![CDATA[E1004]]></description>
     <internalKey>E1004</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E1310</key>
     <name><![CDATA[E1310]]></name>
     <description><![CDATA[E1310]]></description>
     <internalKey>E1310</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>10min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0632</key>
     <name><![CDATA[W0632]]></name>
     <description><![CDATA[W0632]]></description>
     <internalKey>W0632</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0633</key>
     <name><![CDATA[W0633]]></name>
     <description><![CDATA[W0633]]></description>
     <internalKey>W0633</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0711</key>
     <name><![CDATA[W0711]]></name>
     <description><![CDATA[W0711]]></description>
     <internalKey>W0711</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1501</key>
     <name><![CDATA[W1501]]></name>
     <description><![CDATA[W1501]]></description>
     <internalKey>W1501</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1111</key>
     <name><![CDATA[Assigning to function call which only returns None]]></name>
     <description><![CDATA[Used when an assigment is done on a function call but the inferred function returns nothing but None. Explanation needed]]></description>
     <internalKey>W1111</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W1300</key>
     <name><![CDATA[W1300]]></name>
     <description><![CDATA[W1300]]></description>
     <internalKey>W1300</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0512</key>
     <name><![CDATA[W0512]]></name>
     <description><![CDATA[W0512]]></description>
     <internalKey>W0512</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0222</key>
     <name><![CDATA[Missing method %r from %s interface]]></name>
     <description><![CDATA[Used when a method declared in an interface is missing from a class implementing this interface. Explanation This message appears when you have a class A that implements an interface I and that interface has a method m() that was not overwritten in the class A. So, in other words, you have to define and implement your A.m() method declared in I.m() (interfaces are contracts expected to be fulfilled) Example of code that won't pass this check: If you like to learn more about Python interfaces: [ https://www.python.org/dev/peps/pep-0245/]]]></description>
     <internalKey>E0222</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0101</key>
     <name><![CDATA[Unreachable code]]></name>
     <description><![CDATA[Used when there is some code behind a return or raise statement, which will never be accessed. In a method or function, processing of commands stops after a return or raise statement, and control is given back to the code that called the function/method. Any code in a function placed after such a statement will never be accessed. If we have this function: The code print value is placed after the end of the function (the return statement) and thus will never be executed.]]></description>
     <internalKey>W0101</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0102</key>
     <name><![CDATA[Dangerous default value %s as argument]]></name>
     <name><![CDATA[def my_method(self, arg1, extras=[]):    // blah blah...]]></name>
     <description><![CDATA[Used when a mutable value as list or dictionary is detected in a default value for an argument. This is the message that inspired the creation of the PyLint Messages wiki in the first place!! Ned Batchelder gives a good, bad example: To a Python novice, this may seem like a reasonable way to default to an empty array for the extras param. What really happens is that this "default" array gets created as a persistent object, and every invocation of my_method that doesn't specify an extras param will be using that same list objectâ€”any changes to it will persist and be carried to every other invocation! See Ned Batchelder's blog post of 14 June 2008 about PyLint, which highlights this problem and suggests some better alternatives.]]></description>
     <internalKey>W0102</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0104</key>
     <name><![CDATA[Statement seems to have no effect]]></name>
     <description><![CDATA[Used when a statement doesn't have (or at least seems to) any effect. Explanation needed]]></description>
     <internalKey>W0104</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0105</key>
     <name><![CDATA[String statement has no effect]]></name>
     <description><![CDATA[Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments. Explanation needed]]></description>
     <internalKey>W0105</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0106</key>
     <name><![CDATA[W0106]]></name>
     <description><![CDATA[W0106]]></description>
     <internalKey>W0106</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0231</key>
     <name><![CDATA[__init__ method from base class %r is not called]]></name>
     <description><![CDATA[Used when an ancestor class method has an __init__ method which is not called by a derived class. Explanation needed]]></description>
     <internalKey>W0231</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0232</key>
     <name><![CDATA[Class has no __init__ method]]></name>
     <description><![CDATA[Used when a class has no __init__ method, and neither does its parent classes. [[Explanation needed]]]]></description>
     <internalKey>W0232</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0511</key>
     <name><![CDATA[W0511]]></name>
     <description><![CDATA[W0511]]></description>
     <internalKey>W0511</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>60min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0601</key>
     <name><![CDATA[W0601]]></name>
     <description><![CDATA[W0601]]></description>
     <internalKey>W0601</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0602</key>
     <name><![CDATA[W0602]]></name>
     <description><![CDATA[W0602]]></description>
     <internalKey>W0602</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0621</key>
     <name><![CDATA[W0621]]></name>
     <description><![CDATA[W0621]]></description>
     <internalKey>W0621</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0622</key>
     <name><![CDATA[W0622]]></name>
     <description><![CDATA[W0622]]></description>
     <internalKey>W0622</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0631</key>
     <name><![CDATA[W0631]]></name>
     <description><![CDATA[W0631]]></description>
     <internalKey>W0631</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0603</key>
     <name><![CDATA[E0603]]></name>
     <description><![CDATA[E0603]]></description>
     <internalKey>E0603</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>E0604</key>
     <name><![CDATA[E0604]]></name>
     <description><![CDATA[E0604]]></description>
     <internalKey>E0604</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>3min</remediationFunctionGapMultiplier>
     <severity>MAJOR</severity>
     <type>BUG</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0120</key>
     <name><![CDATA[W0120]]></name>
     <description><![CDATA[W0120]]></description>
     <internalKey>W0120</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0234</key>
     <name><![CDATA[W0234]]></name>
     <description><![CDATA[W0234]]></description>
     <internalKey>W0234</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>15min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0223</key>
     <name><![CDATA[Method %r is abstract in class %r but is not overridden]]></name>
     <description><![CDATA[Used when an abstract method (i.e. one that raises NotImplementedError) is not overridden in concrete class. Explanation needed]]></description>
     <internalKey>W0223</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>60min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>C0121</key>
     <name><![CDATA[Missing required attribute "%s"]]></name>
     <description><![CDATA[Used when an attribute required for modules is missing. This message belongs to the basic checker. Explanation needed]]></description>
     <internalKey>C0121</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>W0199</key>
     <name><![CDATA[W0199]]></name>
     <description><![CDATA[W0199]]></description>
     <internalKey>W0199</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>5min</remediationFunctionGapMultiplier>
     <severity>MINOR</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0913</key>
     <name><![CDATA[R0913]]></name>
     <description><![CDATA[R0913]]></description>
     <internalKey>R0913</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>30min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0201</key>
     <name><![CDATA[Method could be a function]]></name>
     <name><![CDATA[Class Foo(object):    ...    def bar(self, baz):        ...        return llama]]></name>
     <name><![CDATA[Class Foo(object):    ...    @classmethod    def bar(cls, baz):        ...        return llama]]></name>
     <description><![CDATA[Used when there is no reference to the class, suggesting that the method could be used as a static function instead If the class method does not reference any of the class attributes it may be more clear to define the method as a static function instead. Attempt using either of the decorators @classmethod or @staticmethod Example: Try instead to use:]]></description>
     <internalKey>R0201</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>20min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0401</key>
     <name><![CDATA[R0401]]></name>
     <description><![CDATA[R0401]]></description>
     <internalKey>R0401</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>120min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0902</key>
     <name><![CDATA[R0902]]></name>
     <description><![CDATA[R0902]]></description>
     <internalKey>R0902</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>120min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
  <rule>
     <key>R0904</key>
     <name><![CDATA[R0904]]></name>
     <description><![CDATA[R0904]]></description>
     <internalKey>R0904</internalKey>
     <remediationFunction>LINEAR</remediationFunction>
     <remediationFunctionGapMultiplier>120min</remediationFunctionGapMultiplier>
     <severity>INFO</severity>
     <type>CODE_SMELL</type>
     <tag>bayzr</tag>
     <tag>python</tag>
  </rule>
</rules>
